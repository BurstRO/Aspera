// Code generated by protoc-gen-go. DO NOT EDIT.
// source: p2p.proto

package p2p

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import any "github.com/golang/protobuf/ptypes/any"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type GetCumulativeDifficultyResponse struct {
	BlockchainHeight     int32  `protobuf:"varint,1,opt,name=blockchainHeight" json:"blockchainHeight,omitempty"`
	CumulativeDifficulty string `protobuf:"bytes,2,opt,name=cumulativeDifficulty" json:"cumulativeDifficulty,omitempty"`
}

func (m *GetCumulativeDifficultyResponse) Reset()                    { *m = GetCumulativeDifficultyResponse{} }
func (m *GetCumulativeDifficultyResponse) String() string            { return proto.CompactTextString(m) }
func (*GetCumulativeDifficultyResponse) ProtoMessage()               {}
func (*GetCumulativeDifficultyResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *GetCumulativeDifficultyResponse) GetBlockchainHeight() int32 {
	if m != nil {
		return m.BlockchainHeight
	}
	return 0
}

func (m *GetCumulativeDifficultyResponse) GetCumulativeDifficulty() string {
	if m != nil {
		return m.CumulativeDifficulty
	}
	return ""
}

type GetNextBlocksResponse struct {
	NextBlocks []*Block `protobuf:"bytes,1,rep,name=nextBlocks" json:"nextBlocks,omitempty"`
}

func (m *GetNextBlocksResponse) Reset()                    { *m = GetNextBlocksResponse{} }
func (m *GetNextBlocksResponse) String() string            { return proto.CompactTextString(m) }
func (*GetNextBlocksResponse) ProtoMessage()               {}
func (*GetNextBlocksResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *GetNextBlocksResponse) GetNextBlocks() []*Block {
	if m != nil {
		return m.NextBlocks
	}
	return nil
}

type GetNextBlockIdsResponse struct {
	NextBlockIds []uint64 `protobuf:"varint,1,rep,packed,name=nextBlockIds" json:"nextBlockIds,omitempty"`
}

func (m *GetNextBlockIdsResponse) Reset()                    { *m = GetNextBlockIdsResponse{} }
func (m *GetNextBlockIdsResponse) String() string            { return proto.CompactTextString(m) }
func (*GetNextBlockIdsResponse) ProtoMessage()               {}
func (*GetNextBlockIdsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *GetNextBlockIdsResponse) GetNextBlockIds() []uint64 {
	if m != nil {
		return m.NextBlockIds
	}
	return nil
}

type GetPeers struct {
	Peers []string `protobuf:"bytes,1,rep,name=peers" json:"peers,omitempty"`
}

func (m *GetPeers) Reset()                    { *m = GetPeers{} }
func (m *GetPeers) String() string            { return proto.CompactTextString(m) }
func (*GetPeers) ProtoMessage()               {}
func (*GetPeers) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *GetPeers) GetPeers() []string {
	if m != nil {
		return m.Peers
	}
	return nil
}

type Block struct {
	PayloadLength       uint32 `protobuf:"varint,1,opt,name=payloadLength" json:"payloadLength,omitempty"`
	TotalAmount         int64  `protobuf:"varint,2,opt,name=totalAmount" json:"totalAmount,omitempty"`
	GenerationSignature []byte `protobuf:"bytes,3,opt,name=generationSignature,proto3" json:"generationSignature,omitempty"`
	GeneratorPublicKey  []byte `protobuf:"bytes,4,opt,name=generatorPublicKey,proto3" json:"generatorPublicKey,omitempty"`
	PayloadHash         []byte `protobuf:"bytes,5,opt,name=payloadHash,proto3" json:"payloadHash,omitempty"`
	BlockSignature      []byte `protobuf:"bytes,6,opt,name=blockSignature,proto3" json:"blockSignature,omitempty"`

	Transactions          []*any.Any `protobuf:"bytes,7,rep,name=transactions" json:"transactions,omitempty"`
	Version               int32      `protobuf:"varint,8,opt,name=version" json:"version,omitempty"`
	Nonce                 uint64     `protobuf:"varint,9,opt,name=nonce" json:"nonce,omitempty"`
	TotalFee              int64      `protobuf:"varint,10,opt,name=totalFee" json:"totalFee,omitempty"`
	BlockATs              []byte     `protobuf:"bytes,11,opt,name=blockATs,proto3" json:"blockATs,omitempty"`
	PreviousBlock         uint64     `protobuf:"varint,12,opt,name=previousBlock" json:"previousBlock,omitempty"`
	Timestamp             uint32     `protobuf:"varint,13,opt,name=timestamp" json:"timestamp,omitempty"`
	Id                    uint64     `protobuf:"varint,14,opt,name=id" json:"id,omitempty"`
	Height                int32      `protobuf:"varint,15,opt,name=height" json:"height,omitempty"`
	PreviousBlockHash     []byte     `protobuf:"bytes,16,opt,name=previousBlockHash,proto3" json:"previousBlockHash,omitempty"`
	BaseTarget            uint64     `protobuf:"varint,17,opt,name=baseTarget" json:"baseTarget,omitempty"`
	CummulativeDifficulty []byte     `protobuf:"bytes,18,opt,name=cummulativeDifficulty,proto3" json:"cummulativeDifficulty,omitempty"`
}

func (m *Block) Reset()                    { *m = Block{} }
func (m *Block) String() string            { return proto.CompactTextString(m) }
func (*Block) ProtoMessage()               {}
func (*Block) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Block) GetPayloadLength() uint32 {
	if m != nil {
		return m.PayloadLength
	}
	return 0
}

func (m *Block) GetTotalAmount() int64 {
	if m != nil {
		return m.TotalAmount
	}
	return 0
}

func (m *Block) GetGenerationSignature() []byte {
	if m != nil {
		return m.GenerationSignature
	}
	return nil
}

func (m *Block) GetGeneratorPublicKey() []byte {
	if m != nil {
		return m.GeneratorPublicKey
	}
	return nil
}

func (m *Block) GetPayloadHash() []byte {
	if m != nil {
		return m.PayloadHash
	}
	return nil
}

func (m *Block) GetBlockSignature() []byte {
	if m != nil {
		return m.BlockSignature
	}
	return nil
}

func (m *Block) GetTransactions() []*any.Any {
	if m != nil {
		return m.Transactions
	}
	return nil
}

func (m *Block) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *Block) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *Block) GetTotalFee() int64 {
	if m != nil {
		return m.TotalFee
	}
	return 0
}

func (m *Block) GetBlockATs() []byte {
	if m != nil {
		return m.BlockATs
	}
	return nil
}

func (m *Block) GetPreviousBlock() uint64 {
	if m != nil {
		return m.PreviousBlock
	}
	return 0
}

func (m *Block) GetTimestamp() uint32 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *Block) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Block) GetHeight() int32 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *Block) GetPreviousBlockHash() []byte {
	if m != nil {
		return m.PreviousBlockHash
	}
	return nil
}

func (m *Block) GetBaseTarget() uint64 {
	if m != nil {
		return m.BaseTarget
	}
	return 0
}

func (m *Block) GetCummulativeDifficulty() []byte {
	if m != nil {
		return m.CummulativeDifficulty
	}
	return nil
}

func init() {
	proto.RegisterType((*GetCumulativeDifficultyResponse)(nil), "p2p.GetCumulativeDifficultyResponse")
	proto.RegisterType((*GetNextBlocksResponse)(nil), "p2p.GetNextBlocksResponse")
	proto.RegisterType((*GetNextBlockIdsResponse)(nil), "p2p.GetNextBlockIdsResponse")
	proto.RegisterType((*GetPeers)(nil), "p2p.GetPeers")
	proto.RegisterType((*Block)(nil), "p2p.Block")
}

func init() { proto.RegisterFile("p2p.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 517 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x93, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0xc7, 0xe5, 0x7c, 0x35, 0x99, 0x7c, 0xd0, 0x2c, 0x29, 0x2c, 0x11, 0x02, 0xcb, 0x42, 0x28,
	0x42, 0xc8, 0x45, 0x81, 0x03, 0x17, 0x0e, 0xa1, 0x88, 0x14, 0x81, 0x50, 0x65, 0xfa, 0x02, 0x1b,
	0x67, 0xe2, 0xac, 0x70, 0x76, 0x2d, 0xef, 0x3a, 0x22, 0x47, 0x1e, 0x80, 0x77, 0x46, 0x1e, 0xa7,
	0x89, 0xd3, 0xfa, 0xe6, 0xf9, 0xfd, 0x67, 0xff, 0x3b, 0x3b, 0x33, 0x86, 0x4e, 0x32, 0x4d, 0xfc,
	0x24, 0xd5, 0x56, 0xb3, 0x7a, 0x32, 0x4d, 0xc6, 0xcf, 0x22, 0xad, 0xa3, 0x18, 0x2f, 0x09, 0x2d,
	0xb2, 0xd5, 0xa5, 0x50, 0xbb, 0x42, 0x1f, 0x0f, 0x6d, 0x2a, 0x94, 0x11, 0xa1, 0x95, 0x5a, 0x15,
	0xc8, 0xfb, 0xeb, 0xc0, 0xcb, 0x39, 0xda, 0xab, 0x6c, 0x93, 0xc5, 0xc2, 0xca, 0x2d, 0x7e, 0x91,
	0xab, 0x95, 0x0c, 0xb3, 0xd8, 0xee, 0x02, 0x34, 0x89, 0x56, 0x06, 0xd9, 0x1b, 0x38, 0x5f, 0xc4,
	0x3a, 0xfc, 0x1d, 0xae, 0x85, 0x54, 0xd7, 0x28, 0xa3, 0xb5, 0xe5, 0x8e, 0xeb, 0x4c, 0x9a, 0xc1,
	0x03, 0xce, 0xa6, 0x30, 0x0a, 0x2b, 0xbc, 0x78, 0xcd, 0x75, 0x26, 0x9d, 0xa0, 0x52, 0xf3, 0xae,
	0xe0, 0x62, 0x8e, 0xf6, 0x27, 0xfe, 0xb1, 0x9f, 0x73, 0x3b, 0x53, 0xba, 0x18, 0xd4, 0x81, 0x72,
	0xc7, 0xad, 0x4f, 0xba, 0x53, 0xf0, 0xf3, 0xf7, 0x12, 0x0a, 0x4a, 0xaa, 0xf7, 0x09, 0x9e, 0x96,
	0x4d, 0xbe, 0x2d, 0x8f, 0x36, 0x1e, 0xf4, 0x54, 0x89, 0x93, 0x51, 0x23, 0x38, 0x61, 0x9e, 0x0b,
	0xed, 0x39, 0xda, 0x1b, 0xc4, 0xd4, 0xb0, 0x11, 0x34, 0x93, 0xfc, 0x83, 0x12, 0x3b, 0x41, 0x11,
	0x78, 0xff, 0x9a, 0xd0, 0xa4, 0x74, 0xf6, 0x0a, 0xfa, 0x89, 0xd8, 0xc5, 0x5a, 0x2c, 0x7f, 0xa0,
	0x8a, 0xec, 0x9a, 0x9a, 0xd1, 0x0f, 0x4e, 0x21, 0x73, 0xa1, 0x6b, 0xb5, 0x15, 0xf1, 0x6c, 0xa3,
	0x33, 0x65, 0xa9, 0x01, 0xf5, 0xa0, 0x8c, 0xd8, 0x3b, 0x78, 0x1c, 0xa1, 0xc2, 0x54, 0xe4, 0xf3,
	0xf8, 0x25, 0x23, 0x25, 0x6c, 0x96, 0x22, 0xaf, 0xbb, 0xce, 0xa4, 0x17, 0x54, 0x49, 0xcc, 0x07,
	0xb6, 0xc7, 0x3a, 0xbd, 0xc9, 0x16, 0xb1, 0x0c, 0xbf, 0xe3, 0x8e, 0x37, 0xe8, 0x40, 0x85, 0x92,
	0xd7, 0xb0, 0x2f, 0xea, 0x5a, 0x98, 0x35, 0x6f, 0x52, 0x62, 0x19, 0xb1, 0xd7, 0x30, 0xa0, 0x19,
	0x1e, 0xaf, 0x6f, 0x51, 0xd2, 0x3d, 0xca, 0x3e, 0x42, 0xaf, 0xb4, 0x3c, 0x86, 0x9f, 0xd1, 0x30,
	0x46, 0x7e, 0xb1, 0x6c, 0xfe, 0xdd, 0xb2, 0xf9, 0x33, 0xb5, 0x0b, 0x4e, 0x32, 0x19, 0x87, 0xb3,
	0x2d, 0xa6, 0x46, 0x6a, 0xc5, 0xdb, 0xb4, 0x34, 0x77, 0x61, 0xde, 0x67, 0xa5, 0x55, 0x88, 0xbc,
	0xe3, 0x3a, 0x93, 0x46, 0x50, 0x04, 0x6c, 0x0c, 0x6d, 0x6a, 0xd2, 0x57, 0x44, 0x0e, 0xd4, 0xb4,
	0x43, 0x9c, 0x6b, 0x54, 0xd7, 0xec, 0xd6, 0xf0, 0x2e, 0xd5, 0x79, 0x88, 0x69, 0x2a, 0x29, 0x6e,
	0xa5, 0xce, 0x0c, 0x8d, 0x89, 0xf7, 0xc8, 0xf5, 0x14, 0xb2, 0xe7, 0xd0, 0xb1, 0x72, 0x83, 0xc6,
	0x8a, 0x4d, 0xc2, 0xfb, 0x34, 0xb7, 0x23, 0x60, 0x03, 0xa8, 0xc9, 0x25, 0x1f, 0xd0, 0xc1, 0x9a,
	0x5c, 0xb2, 0x27, 0xd0, 0x5a, 0x17, 0xfb, 0xfe, 0x88, 0x4a, 0xdf, 0x47, 0xec, 0x2d, 0x0c, 0x4f,
	0x6c, 0xa9, 0xbb, 0xe7, 0x54, 0xd0, 0x43, 0x81, 0xbd, 0x00, 0x58, 0x08, 0x83, 0xb7, 0x22, 0x8d,
	0xd0, 0xf2, 0x21, 0xbd, 0xa9, 0x44, 0xd8, 0x07, 0xb8, 0x08, 0xb3, 0x4d, 0xc5, 0x4f, 0xc3, 0xc8,
	0xb1, 0x5a, 0x5c, 0xb4, 0xa8, 0xe7, 0xef, 0xff, 0x07, 0x00, 0x00, 0xff, 0xff, 0x84, 0x3f, 0x4e,
	0x8e, 0x00, 0x04, 0x00, 0x00,
}
